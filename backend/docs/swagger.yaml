definitions:
  controllers.APIResponse:
    properties:
      data: {}
      status:
        type: integer
    type: object
  controllers.DrugCreationRequest:
    properties:
      amount:
        description: Quantity of the drug available
        type: string
      description:
        description: Description or purpose of the drug
        type: string
      dose:
        description: Dosage information
        type: string
      expiry:
        description: Expiry date of the drug
        example: "2025-07-12T23:45:00Z"
        type: string
      location:
        description: Storage location of the drug
        type: string
      manufacturer:
        description: Manufacturer of the drug
        type: string
      name:
        description: Name of the drug
        type: string
      type:
        description: Type or category of the drug
        type: string
    type: object
  controllers.MessageRequest:
    properties:
      chat_id:
        description: ID of the chat session
        type: integer
      text:
        description: Text content of the message sent by user
        type: string
    type: object
  controllers.User:
    properties:
      email:
        example: Aspirin@asperinovish.ru
        type: string
      name:
        example: Aspirin
        type: string
      password:
        example: Aspirin
        type: string
    type: object
  controllers.UserUpdates:
    properties:
      address:
        type: string
      allergies:
        type: string
      blood_type:
        type: string
      chronic_cond:
        type: string
      passport:
        type: string
      snils:
        type: string
    type: object
  models.Document:
    properties:
      date:
        description: Date the document was created or issued
        example: "2025-07-12T23:45:00Z"
        type: string
      doctor:
        description: Name of the doctor associated with the document
        type: string
      file_data:
        description: File contents (binary), base64-encoded when serialized to JSON
        items:
          type: integer
        type: array
      name:
        description: Name/title of the document
        type: string
      type:
        description: Type/category of document (e.g. prescription, report)
        type: string
    type: object
  models.Drug:
    properties:
      amount:
        description: Quantity of the drug available
        type: string
      description:
        description: Description or purpose of the drug
        type: string
      dose:
        description: Dosage information
        type: string
      expiry:
        description: Expiry date of the drug
        example: "2025-07-12T23:45:00Z"
        type: string
      id:
        description: Unique identifier for the drug (hidden from JSON)
        type: integer
      location:
        description: Storage location of the drug
        type: string
      manufacturer:
        description: Manufacturer of the drug
        type: string
      name:
        description: Name of the drug
        type: string
      type:
        description: Type or category of the drug
        type: string
      user_id:
        description: ID of the user who owns the drug (hidden from JSON)
        type: integer
    type: object
info:
  contact: {}
paths:
  /auth/chats:
    get:
      description: Returns a list of chat IDs and titles associated with the current
        user.
      produces:
      - application/json
      responses:
        "200":
          description: '[ {title: string, id: caht_id}, ...]'
          schema:
            $ref: '#/definitions/controllers.APIResponse'
        "500":
          description: Failed to fetch user's chats
          schema:
            $ref: '#/definitions/controllers.APIResponse'
      security:
      - BearerAuth: []
      summary: Get user's chat sessions
      tags:
      - chats
    post:
      description: Creates a new chat with a temporary title for the current user
        and returns the chat ID.
      produces:
      - application/json
      responses:
        "200":
          description: 'Data: chatID'
          schema:
            $ref: '#/definitions/controllers.APIResponse'
        "500":
          description: Server or database error
          schema:
            $ref: '#/definitions/controllers.APIResponse'
      security:
      - BearerAuth: []
      summary: Create a new chat
      tags:
      - chats
  /auth/chats/{id}:
    get:
      description: Returns the list of messages in a given chat, including message
        ID, sender, and text.
      parameters:
      - description: Chat ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '[ {id: message_id, sender: 0/1, text: message_text}, ...]'
          schema:
            $ref: '#/definitions/controllers.APIResponse'
        "500":
          description: Failed to fetch chat or messages
          schema:
            $ref: '#/definitions/controllers.APIResponse'
      security:
      - BearerAuth: []
      summary: Get messages from a chat
      tags:
      - chats
  /auth/documents:
    get:
      consumes:
      - application/json
      description: Returns all user documents in json format
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Document'
            type: array
      security:
      - BearerAuth: []
      summary: Get all documents
      tags:
      - documents
  /auth/documents/add:
    post:
      consumes:
      - application/json
      parameters:
      - description: document body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Document'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.APIResponse'
            type: array
      security:
      - BearerAuth: []
      summary: Add one document
      tags:
      - documents
  /auth/drugs:
    get:
      consumes:
      - application/json
      description: Returns all drugs in json format
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Drug'
            type: array
      security:
      - BearerAuth: []
      summary: Get all drugs
      tags:
      - drugs
  /auth/drugs/add:
    post:
      consumes:
      - application/json
      parameters:
      - description: login body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.DrugCreationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.APIResponse'
            type: array
      security:
      - BearerAuth: []
      summary: Add one drug
      tags:
      - drugs
  /auth/drugs/remove/{id}:
    post:
      consumes:
      - application/json
      parameters:
      - description: login body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.DrugCreationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.APIResponse'
      security:
      - BearerAuth: []
      summary: Remove one drug by id
      tags:
      - drugs
  /auth/me:
    post:
      consumes:
      - application/json
      description: Updates user's personal details and medical card info
      parameters:
      - description: Fields to update
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.UserUpdates'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.APIResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/controllers.APIResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/controllers.APIResponse'
      security:
      - BearerAuth: []
      summary: Update user's profile
      tags:
      - users
  /auth/send_message:
    post:
      consumes:
      - application/json
      description: Stores the user's message, streams a response from the AI model,
        and stores the AI reply.
      parameters:
      - description: Chat ID and user message
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.MessageRequest'
      produces:
      - text/event-stream
      responses:
        "200":
          description: streamed AI response
          schema:
            type: string
        "400":
          description: Invalid request body or empty message
          schema:
            $ref: '#/definitions/controllers.APIResponse'
        "500":
          description: Internal server or streaming error
          schema:
            $ref: '#/definitions/controllers.APIResponse'
      security:
      - BearerAuth: []
      summary: Send a message and receive AI response via SSE
      tags:
      - chats
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT
      parameters:
      - description: login body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.APIResponse'
      summary: Log in a user
      tags:
      - users
  /me:
    get:
      consumes:
      - application/json
      description: Retrieves the authenticated user's details
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.APIResponse'
      summary: Get current user
      tags:
      - users
  /signup:
    post:
      consumes:
      - application/json
      description: Creates a new user account
      parameters:
      - description: signup body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.APIResponse'
      summary: Sign up a new user
      tags:
      - users
swagger: "2.0"
